<!DOCTYPE html>
<html>
<head>
    <title>Kubernetes Monitoring Dashboard</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { padding-top: 20px; }
        .card { margin-bottom: 20px; }
        .status-ready { color: green; }
        .status-notready { color: red; }
        .status-warning { color: orange; }
        .table-container { overflow-x: auto; }
        .resource-chart { height: 200px; }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col">
                <h1>Kubernetes Monitoring Dashboard</h1>
                <p>{{ running_mode }} - <span id="lastUpdated"></span></p>
                <button id="refreshBtn" class="btn btn-primary">Refresh Data</button>
            </div>
        </div>
        
        <div class="row">
            <!-- Cluster Overview -->
            <div class="col-md-6 col-lg-3">
                <div class="card">
                    <div class="card-header">
                        <h5>Cluster Overview</h5>
                    </div>
                    <div class="card-body">
                        <div id="clusterHealth"></div>
                        <div class="mt-3">
                            <h6>Resource Usage</h6>
                            <div class="mb-2">
                                <label>CPU Usage:</label>
                                <div class="progress">
                                    <div id="cpuProgress" class="progress-bar" role="progressbar" style="width: 0%"></div>
                                </div>
                                <small id="cpuText">0/0 cores</small>
                            </div>
                            <div>
                                <label>Memory Usage:</label>
                                <div class="progress">
                                    <div id="memoryProgress" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
                                </div>
                                <small id="memoryText">0/0 GB</small>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h5>Nodes</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-container">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Status</th>
                                        <th>CPU</th>
                                        <th>Memory</th>
                                    </tr>
                                </thead>
                                <tbody id="nodesTable"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Pods -->
            <div class="col-md-6 col-lg-9">
                <div class="card">
                    <div class="card-header">
                        <h5>Pods</h5>
                        <div class="input-group mt-2">
                            <input type="text" id="podSearch" class="form-control" placeholder="Search pods...">
                            <select id="namespaceFilter" class="form-select">
                                <option value="all">All Namespaces</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-container">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Namespace</th>
                                        <th>Status</th>
                                        <th>Ready</th>
                                        <th>Restarts</th>
                                        <th>Age</th>
                                        <th>CPU</th>
                                        <th>Memory</th>
                                        <th>Node</th>
                                    </tr>
                                </thead>
                                <tbody id="podsTable"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Deployments</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-container">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Namespace</th>
                                                <th>Replicas</th>
                                                <th>Age</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody id="deploymentsTable"></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Services</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-container">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Namespace</th>
                                                <th>Type</th>
                                                <th>Cluster IP</th>
                                                <th>External IP</th>
                                                <th>Ports</th>
                                            </tr>
                                        </thead>
                                        <tbody id="servicesTable"></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Update UI with data
        function updateUI(data) {
            // Last updated
            document.getElementById('lastUpdated').textContent = 'Last updated: ' + data.last_updated;
            
            // Cluster health
            let healthHtml = '';
            if (data.cluster_health.status === 'Healthy') {
                healthHtml += '<div class="alert alert-success">Cluster is healthy</div>';
            } else {
                healthHtml += '<div class="alert alert-danger">Cluster has issues</div>';
            }
            
            if (data.cluster_health.components && data.cluster_health.components.length > 0) {
                healthHtml += '<ul class="list-group">';
                data.cluster_health.components.forEach(component => {
                    const statusClass = component.status === 'Healthy' ? 'status-ready' : 'status-notready';
                    healthHtml += `<li class="list-group-item d-flex justify-content-between align-items-center">
                        ${component.name}
                        <span class="${statusClass}">${component.status}</span>
                    </li>`;
                });
                healthHtml += '</ul>';
            }
            document.getElementById('clusterHealth').innerHTML = healthHtml;
            
            // Resource usage
            const cpuUsed = data.resource_usage.cpu.used;
            const cpuTotal = data.resource_usage.cpu.total;
            const cpuPercent = cpuTotal > 0 ? (cpuUsed / cpuTotal) * 100 : 0;
            
            document.getElementById('cpuProgress').style.width = cpuPercent + '%';
            document.getElementById('cpuText').textContent = `${cpuUsed.toFixed(2)}/${cpuTotal} cores (${cpuPercent.toFixed(1)}%)`;
            
            const memoryUsed = data.resource_usage.memory.used;
            const memoryTotal = data.resource_usage.memory.total;
            const memoryPercent = memoryTotal > 0 ? (memoryUsed / memoryTotal) * 100 : 0;
            
            document.getElementById('memoryProgress').style.width = memoryPercent + '%';
            document.getElementById('memoryText').textContent = `${memoryUsed.toFixed(2)}/${memoryTotal.toFixed(1)} GB (${memoryPercent.toFixed(1)}%)`;
            
            // Nodes
            let nodesHtml = '';
            if (data.nodes && data.nodes.length > 0) {
                data.nodes.forEach(node => {
                    const statusClass = node.status === 'Ready' ? 'status-ready' : 'status-notready';
                    nodesHtml += `<tr>
                        <td>${node.name}</td>
                        <td class="${statusClass}">${node.status}</td>
                        <td>${node.cpu}</td>
                        <td>${node.memory}</td>
                    </tr>`;
                });
            } else {
                nodesHtml = '<tr><td colspan="4">No nodes found</td></tr>';
            }
            document.getElementById('nodesTable').innerHTML = nodesHtml;
            
            // Update namespace filter
            const namespaceFilter = document.getElementById('namespaceFilter');
            const currentSelection = namespaceFilter.value;
            
            // Clear existing options except "All Namespaces"
            while (namespaceFilter.options.length > 1) {
                namespaceFilter.remove(1);
            }
            
            // Add namespaces from pods
            const namespaces = new Set();
            if (data.pods && data.pods.length > 0) {
                data.pods.forEach(pod => {
                    namespaces.add(pod.namespace);
                });
                
                // Sort namespaces
                Array.from(namespaces).sort().forEach(namespace => {
                    const option = document.createElement('option');
                    option.value = namespace;
                    option.textContent = namespace;
                    namespaceFilter.appendChild(option);
                });
            }
            
            // Restore selection if possible
            if (Array.from(namespaceFilter.options).some(option => option.value === currentSelection)) {
                namespaceFilter.value = currentSelection;
            }
            
            // Filter and display pods
            filterAndDisplayPods(data.pods);
            
            // Deployments
            let deploymentsHtml = '';
            if (data.deployments && data.deployments.length > 0) {
                data.deployments.forEach(deployment => {
                    const statusClass = deployment.status === 'Available' ? 'status-ready' : 'status-warning';
                    deploymentsHtml += `<tr>
                        <td>${deployment.name}</td>
                        <td>${deployment.namespace}</td>
                        <td>${deployment.replicas}</td>
                        <td>${deployment.age}</td>
                        <td class="${statusClass}">${deployment.status}</td>
                    </tr>`;
                });
            } else {
                deploymentsHtml = '<tr><td colspan="5">No deployments found</td></tr>';
            }
            document.getElementById('deploymentsTable').innerHTML = deploymentsHtml;
            
            // Services
            let servicesHtml = '';
            if (data.services && data.services.length > 0) {
                data.services.forEach(service => {
                    servicesHtml += `<tr>
                        <td>${service.name}</td>
                        <td>${service.namespace}</td>
                        <td>${service.type}</td>
                        <td>${service.cluster_ip}</td>
                        <td>${service.external_ip}</td>
                        <td>${service.ports}</td>
                    </tr>`;
                });
            } else {
                servicesHtml = '<tr><td colspan="6">No services found</td></tr>';
            }
            document.getElementById('servicesTable').innerHTML = servicesHtml;
        }
        
        // Filter and display pods
        function filterAndDisplayPods(pods) {
            const searchTerm = document.getElementById('podSearch').value.toLowerCase();
            const namespaceFilter = document.getElementById('namespaceFilter').value;
            
            let filteredPods = pods;
            
            // Apply namespace filter
            if (namespaceFilter !== 'all') {
                filteredPods = filteredPods.filter(pod => pod.namespace === namespaceFilter);
            }
            
            // Apply search filter
            if (searchTerm) {
                filteredPods = filteredPods.filter(pod => 
                    pod.name.toLowerCase().includes(searchTerm) || 
                    pod.namespace.toLowerCase().includes(searchTerm)
                );
            }
            
            // Display pods
            let podsHtml = '';
            if (filteredPods && filteredPods.length > 0) {
                filteredPods.forEach(pod => {
                    const statusClass = pod.status === 'Running' ? 'status-ready' : 
                                       pod.status === 'Pending' ? 'status-warning' : 'status-notready';
                    podsHtml += `<tr>
                        <td>${pod.name}</td>
                        <td>${pod.namespace}</td>
                        <td class="${statusClass}">${pod.status}</td>
                        <td>${pod.ready}</td>
                        <td>${pod.restarts}</td>
                        <td>${pod.age}</td>
                        <td>${pod.cpu}</td>
                        <td>${pod.memory}</td>
                        <td>${pod.node}</td>
                    </tr>`;
                });
            } else {
                podsHtml = '<tr><td colspan="9">No pods found</td></tr>';
            }
            document.getElementById('podsTable').innerHTML = podsHtml;
        }
        
        // Fetch data from API
        function fetchData() {
            fetch('/api/data')
                .then(response => response.json())
                .then(data => {
                    updateUI(data);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }
        
        // Set up event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Initial data fetch
            fetchData();
            
            // Refresh button
            document.getElementById('refreshBtn').addEventListener('click', fetchData);
            
            // Pod search
            document.getElementById('podSearch').addEventListener('input', function() {
                fetch('/api/data')
                    .then(response => response.json())
                    .then(data => {
                        filterAndDisplayPods(data.pods);
                    });
            });
            
            // Namespace filter
            document.getElementById('namespaceFilter').addEventListener('change', function() {
                fetch('/api/data')
                    .then(response => response.json())
                    .then(data => {
                        filterAndDisplayPods(data.pods);
                    });
            });
            
            // Auto-refresh every 30 seconds
            setInterval(fetchData, 30000);
        });
    </script>
</body>
</html>
